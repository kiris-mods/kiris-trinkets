import java.time.OffsetDateTime
import java.time.ZoneOffset

plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    alias libs.plugins.quilt.loom
    id 'org.cadixdev.licenser' version '0.6.1'
}

base {
	archivesName = project.archives_base_name
}

version = "${libs.versions.minecraft.get()}-${project.version}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
    maven {
        name "TerraformersMC"
        url "https://maven.terraformersmc.com/releases/"
    }

    maven {
        name "Forge Maven"
        url "https://maven.minecraftforge.net/"
    }

    maven {
        name "NeoForged Maven"
        url "https://maven.neoforged.net/"
    }

    maven {
        name "CurseMaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
		name "Modrinth"
		url "https://api.modrinth.com/maven"

        content {
            includeGroup "maven.modrinth"
        }
    }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	//mappings "net.fabricmc:yarn:1.20.1+build.10:v2"
	//mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	// Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api

	modImplementation libs.midnight.lib
	modImplementation libs.kiris.lib
	modApi libs.modmenu
}

processResources {
	inputs.properties 'version': version, 'group': project.group

	filesMatching(['quilt.mod.json']) {
		expand 'version': version, 'group': project.group
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	if (project.hasProperty('make_sources_jar') && project.findProperty('make_sources_jar').toBoolean()) {
		withSourcesJar()
	}

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	if (project.hasProperty('make_javadoc_jar') && project.findProperty('make_javadoc_jar').toBoolean()) {
		withJavadocJar()
	}
}

var manifestAttributes = [
	"Specification-Title"     : project.mod_name,
	"Specification-Vendor"    : project.mod_author,
	"Specification-Version"   : "1", // We are version 1 of ourselves
	"Implementation-Title"    : project.mod_name,
	"Implementation-Version"  : project.jar.archiveVersion,
	"Implementation-Vendor"   : project.mod_author,
	"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
	"Built-On-Java"           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
	"Build-On-Minecraft"      : libs.versions.minecraft.get()
]

jar {
	filesMatching('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}
	manifest.attributes(manifestAttributes)
	includeEmptyDirs false
	preserveFileTimestamps = true
	reproducibleFileOrder = true
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

loom {
	if (project.hasProperty('aws_enabled') && project.findProperty('aws_enabled').toBoolean()) {
		accessWidenerPath = file("src/main/resources/${project.archives_base_name}.accesswidener")
		project.logger.debug('Access Widener are enabled for this project!!!')
	}
	runs {
		client {
			client()
			setConfigName("Minecraft Client")
			ideConfigGenerated(true)
			runDir("run")

			if (project.hasProperty('mc_uuid')) {
				// Your UUID, trimmed / without the dashes
				programArgs('--uuid', project.getProperty('mc_uuid'))
			}

			if (project.hasProperty('mc_username')) {
				// Your Minecraft in-game username, not email
				programArgs('--username', project.getProperty('mc_username'))
			}
		}

		server {
			server()
			setConfigName("Minecraft Server")
			ideConfigGenerated(true)
			runDir("run")
			programArgs('--singleplayer', "yes", '--nogui', "true")
		}

		datagenClient {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${project.archives_base_name}"

			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
				'src/main/generated'
			]
		}
	}
}

final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)

license {
    ignoreFailures = false
    header = project.file('LicenseHeader.txt')
    include '**/*.java'
    include '**/*.kt'
    exclude '**/package-info.java'
    exclude '**/module-info.java'
    newLine = false
    properties {
        year = actualDateTime.getYear()
        name = mod_name
        source = mod_source
        author = mod_author
    }
}

// messy workaround for bug in quilt loom 1.3.3
project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}
